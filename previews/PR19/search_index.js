var documenterSearchIndex = {"docs":
[{"location":"#PkgUtility.jl","page":"Home","title":"PkgUtility.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Utility functions for Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg;\njulia> Pkg.add(\"PkgUtility\");","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = PkgUtility","category":"page"},{"location":"API/#Artifacts","page":"API","title":"Artifacts","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"deploy_artifact\ndeploy_artifact(art_toml::String, art_name::String, art_locf::String,\n    art_file::Array{String,1}, art_tarf::String, art_urls::Array{String,1};\n    new_file::Array{String,1} = art_file)\ndeploy_artifact(art_toml::String, art_name::String, art_locf::String,\n    art_tarf::String, art_urls::Array{String,1})\npredownload_artifact\npredownload_artifact(art_name::String, artifact_toml::String)","category":"page"},{"location":"API/#PkgUtility.deploy_artifact","page":"API","title":"PkgUtility.deploy_artifact","text":"PkgUtility provides a convenient wrapper to deploy the artifact from a given     list of files, for exmaple, deploy_artifact function is used to deploy     the GirddingMachine     artifacts.\n\ndeploy_artifact(art_toml, art_name, art_locf, art_file, art_tarf, art_urls; new_file)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/artifact/deploy.jl:71.\n\ndeploy_artifact(art_toml, art_name, art_locf, art_tarf, art_urls)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/artifact/deploy.jl:146.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.deploy_artifact-Tuple{String, String, String, Vector{String}, String, Vector{String}}","page":"API","title":"PkgUtility.deploy_artifact","text":"What deploy_artifact function does are\n\ndetermine if the artifact already exists in the art_toml file\nif true, skip the deployment\nif false\ncopy the file(s) to ~/.julia/artifacts/ARTIFACT_SHA/\ncompress the artifact file(s) to a .tar.gz file\ncalculate the hash value of the compressed tar.gz file\nbind the artifact file to the .toml file\n\nMethod for this deployment is\n\ndeploy_artifact(\n            art_toml::String,\n            art_name::String,\n            art_locf::String,\n            art_file::Vector{String},\n            art_tarf::String,\n            art_urls::Vector{String};\n            new_file::Vector{String} = art_file)\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files\nart_file Vector of the source file names\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be   uploaded (user need to upload the file manually)\nnew_file Optional. New file names of the copied files (same as art_file   by default)\n\n\n\nExamples\n\n# deploy art_1.txt and art_2.txt as test_art artifact\ndeploy_artifact(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt],\n                \"./\", [\"https://public.server.url\"])\n# deploy art_1.txt and art_2.txt as test_art artifact with new names\ndeploy_artifact(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt],\n                \"./\", [\"https://public.server.url\"];\n                new_files=[\"new_1.txt\", \"new_2.txt\"]);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.deploy_artifact-Tuple{String, String, String, String, Vector{String}}","page":"API","title":"PkgUtility.deploy_artifact","text":"In many cases, one might want to copy all the files in a folder to the target     artifact, and iterate the file names is not convenient at all. Thus,     a readily usable method is provided for this purpose:\n\ndeploy_artifact(\n            art_toml::String,\n            art_name::String,\n            art_locf::String,\n            art_tarf::String,\n            art_urls::Vector{String})\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files (all files will be   copied into the artifact)\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be   uploaded (user need to upload the file manually)\n\n\n\nExamples\n\n# deploy all files in target folder\ndeploy_artifact(\"Artifacts.toml\", \"test_art\", \"./folder\", \"./\",\n                [\"https://public.server.url\"])\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.predownload_artifact","page":"API","title":"PkgUtility.predownload_artifact","text":"Artifacts stored on FTP cannot be installed directly for Windows using Julia     1.5. This problem may be fixed in future Julia versions. To address the     problem for lower Julia versions, PkgUtility provides function     predownload_artifact to download and unpack the artifact manually for     Windows:\n\npredownload_artifact(art_name, artifact_toml)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/artifact/download.jl:46.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.predownload_artifact-Tuple{String, String}","page":"API","title":"PkgUtility.predownload_artifact","text":"What predownload_artifact does are\n\ndetermine if the artifact exists already\nif true, skip the artifact installation\nif false\ninstall the artifact using the download_artifact from Pkg.Artifacts\nif the installation fails (e.g., for Windows)\ndownload the .tar.gz manually\nunpack the  .tar.gz manually\n\nMethod for this function is\n\npredownload_artifact(art_name::String, artifact_toml::String)\n\nDownload the artifact from given server if it does not exist, given\n\nart_name Artifact name to install\nartifact_toml Artifacts.toml file location\n\n\n\nExamples\n\n# download the artifact manually if default methods fail\npredownload_artifact(\"test_artifact\", \"Artifacts.toml\");\n\n\n\n\n\n","category":"method"},{"location":"API/#Date","page":"API","title":"Date","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"month_days\nmonth_ind\nparse_timestamp\nparse_timestamp(time_stamp::Union{Int,String}; in_format::String=\"YYYYMMDD\",\n    out_format::String=\"DOY\")\nparse_timestamp(year::Int, doy::Int, sep::String=\"\")","category":"page"},{"location":"API/#PkgUtility.month_days","page":"API","title":"PkgUtility.month_days","text":"month_days(year::Int, month::Int)\n\nHow many days in a month, given\n\nyear Year\nmonth Month\n\n\n\nExamples\n\n# inquire how many days in 2020 October\nmonth_days(2020, 10);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.month_ind","page":"API","title":"PkgUtility.month_ind","text":"month_ind(year::Int, doy::Int)\n\nWhich month does the day of year belongs to, given\n\nyear Year\ndoy Day of year (typically 1-365, 1-366 for leap years)\n\n\n\nExamples\n\n# inquire which month it is for 100th day in 2020\nmonth_ind(2020, 100);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.parse_timestamp","page":"API","title":"PkgUtility.parse_timestamp","text":"Researchers may often run into the scenarios when they have to convert dates to     strings or numbers, vice versa. Thought the conversions are easy to make,     it is not convenient at all if ones need to recreate the wheel everytime.     Thus, we provide functions to make the conversion. One of the common     conversions is to convert time stamp to a number:\n\nparse_timestamp(time_stamp; in_format, out_format)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/date/doy.jl:89.\n\nparse_timestamp(year, doy)\nparse_timestamp(year, doy, sep)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/date/doy.jl:157.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.parse_timestamp-Tuple{Union{Int64, String}}","page":"API","title":"PkgUtility.parse_timestamp","text":"The time stamp can be either an integer or a string, and the integer will be     converted to a string within the function. The supported time stamp formats     are YYYYMMDD, YYYYMMDDhh, YYYYMMDDhhmm, and YYYYMMDDhhmmss, where     the labels are\n\nYYYY Year number\nMM Month number\nDD Day number\nhh Hour number\nmm Minute number\nss second number\n\nThe supported outputs are\n\nDATE A Dates.Date type variable\nDATETIME A Dates.DateTime type variable\nDOY A day of year integer\nFDOY A day of year float\nparsetimestamp(               timestamp::Union{Int,String};               informat::String = \"YYYYMMDD\",               outformat::String = \"DOY\")\n\nConvert time stamp, given\n\ntime_stamp Time stamp\nin_format Format of time_stamp, default is YYYYMMDD\nout_format Output format, default is DOY\n\n\n\nExamples\n\n# if input format is YYYYMMDD\n_inf = \"YYYYMMDD\";\nfor _ts in [20200130, \"20200130\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhh\n_inf = \"YYYYMMDDhh\";\nfor _ts in [2020013002, \"2020013002\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhhmm\n_inf = \"YYYYMMDDhhmm\";\nfor _ts in [202001300215, \"202001300215\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhhss\n_inf = \"YYYYMMDDhhmmss\";\nfor _ts in [20200130021515, \"20200130021515\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.parse_timestamp-2","page":"API","title":"PkgUtility.parse_timestamp","text":"Also, one might want to convert date to time stamp. Supported conversions are\n\nparse_timestamp(year::Int, doy::Int, sep::String=\"\")\n\nConvert date to YYYY(sep)MM(sep)DD format, given\n\nyear Year\ndoy Day of year (typically 1-365, 1-366 for leap years)\nsep String that separates year, month, and day. Default is \"\"\n\n\n\nExamples\n\n# convert the time to YYYYMMDD format\nparse_timestamp(2020, 100);\nparse_timestamp(2020, 100, \"\");\n\n# convert the time to YYYY.MM.DD format\nparse_timestamp(2020, 100, \".\");\n\n\n\n\n\n","category":"function"},{"location":"API/#Display","page":"API","title":"Display","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"pretty_display\npretty_display(dict::Pair, max_len::Int, spaces = \"    \")\npretty_display(dicts::Union{Array{Pair{String,String},1},\n    Array{Pair{String,Any},1}, Array{Pair{Any,String},1},\n    Array{Pair{Any,Any},1}}, spaces::String = \"    \")","category":"page"},{"location":"API/#PkgUtility.pretty_display","page":"API","title":"PkgUtility.pretty_display","text":"Display the parameters in a colored way.\n\npretty_display(dict, max_len)\npretty_display(dict, max_len, spaces)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/display/recursive.jl:38.\n\npretty_display(dicts)\npretty_display(dicts, spaces)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/display/recursive.jl:100.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.pretty_display-2","page":"API","title":"PkgUtility.pretty_display","text":"When a dictionary (a pair of key and item) is passed to the pretty_display     function, the dictionary will be displayed as (LEADING_SPACE)key ⇨ item,.     However, if the dictionary item is an array of dictionaries, then the array     will be displayed recursively.\n\npretty_display(dict::Pair, max_len::Int, spaces = \"    \")\n\nDisplay the key and item in a dictionary (Pair), given\n\ndict Dictionary to display\nmax_len Maximum length of dictionary key (in an array)\nspaces Leading spaces before displaying the dictionary key\n\n\n\nExamples\n\n# display the pair in a pretty way (automatic alignments)\npretty_display(\"a\" => \"b\", 1);\npretty_display(\"a\" => \"b\", 2, \"  \");\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.pretty_display-3","page":"API","title":"PkgUtility.pretty_display","text":"When an array of dictionaries is given, the pretty_display function computes     the maximum length of the dictionary keys, and then display the     dictionaries in a colored and pretty manner\n\npretty_display(\n            dicts::Union{Vector{Pair{String,String}},\n                         Vector{Pair{String,Any}},\n                         Vector{Pair{Any,String}},\n                         Vector{Pair{Any,Any}}},\n            spaces::String = \"    \")\n\nDisplay array of pairs (dictionary) in recursive manner, given\n\ndicts Parameters to display\nspaces Leading spaces\n\n\n\nExamples\n\n# display the vector of pairs recursively (automatic alignments)\n_dicts = [\"A\" => \"b\", \"d\" => \"A\", \"rr\" => [\"ra\" => \"rB\", \"rD\" => \"ra\"]];\npretty_display(_dicts);\npretty_display(_dicts, \"  \");\n\n\n\n\n\n","category":"function"},{"location":"API/#Math","page":"API","title":"Math","text":"","category":"section"},{"location":"API/#Integral-function","page":"API","title":"Integral function","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"numerical∫","category":"page"},{"location":"API/#PkgUtility.numerical∫","page":"API","title":"PkgUtility.numerical∫","text":"Function numerical∫ calculates the integral numerically. The supported     methods are\n\nnumerical∫(f, Δx)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:39.\n\nnumerical∫(f, Δx)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:71.\n\nnumerical∫(f, x_min, x_max, n)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:107.\n\nnumerical∫(f, x_min, x_max)\nnumerical∫(f, x_min, x_max, x_tol)\nnumerical∫(f, x_min, x_max, x_tol, y_tol)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:127.\n\n\n\n\n\n","category":"function"},{"location":"API/#Quadratic-solver","page":"API","title":"Quadratic solver","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"lower_quadratic\nupper_quadratic","category":"page"},{"location":"API/#PkgUtility.lower_quadratic","page":"API","title":"PkgUtility.lower_quadratic","text":"lower_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the lower quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.upper_quadratic","page":"API","title":"PkgUtility.upper_quadratic","text":"upper_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the upper quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\n\n\n","category":"function"},{"location":"API/#Statistics-extensions","page":"API","title":"Statistics extensions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"mae\nmape\nmase\nnanmax\nnanmean\nnanmedian\nnanmin\nnanstd\nrmse","category":"page"},{"location":"API/#PkgUtility.mae","page":"API","title":"PkgUtility.mae","text":"mae(y::Array, pred::Array)\n\nReturn the mean absolute error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.mape","page":"API","title":"PkgUtility.mape","text":"mape(y::Array, pred::Array)\n\nReturn the mean absolute percentage error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.mase","page":"API","title":"PkgUtility.mase","text":"mase(y::Array, pred::Array)\n\nReturn the mean absolute standardized error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmax","page":"API","title":"PkgUtility.nanmax","text":"nanmax(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmean","page":"API","title":"PkgUtility.nanmean","text":"nanmean(x::Array)\n\nReturn the mean of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmedian","page":"API","title":"PkgUtility.nanmedian","text":"nanmedian(x::Array)\n\nReturn the median of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmin","page":"API","title":"PkgUtility.nanmin","text":"nanmin(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanstd","page":"API","title":"PkgUtility.nanstd","text":"nanstd(x::Array)\n\nReturn the std of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.rmse","page":"API","title":"PkgUtility.rmse","text":"rmse(y::Array, pred::Array)\n\nReturn the root mean square error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\n\n\n","category":"function"},{"location":"API/#NetCDF-extensions","page":"API","title":"NetCDF extensions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"ncread","category":"page"},{"location":"API/#Recursive-test","page":"API","title":"Recursive test","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"FT_test\nNaN_test","category":"page"},{"location":"API/#PkgUtility.FT_test","page":"API","title":"PkgUtility.FT_test","text":"FT_test(para::Any, FT)\n\nTest the the floating point type of para is FT, given\n\npara Any type of parameters\nFT given FT\n\nIf data type is not supported, use pass!\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.NaN_test","page":"API","title":"PkgUtility.NaN_test","text":"NaN_test(para::Any)\n\nTest the the floating point type of para is not NaN, given\n\npara Any type of parameters\n\nIf data type is not supported, use pass!\n\n\n\n\n\n","category":"function"}]
}
