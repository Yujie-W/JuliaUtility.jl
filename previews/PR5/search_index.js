var documenterSearchIndex = {"docs":
[{"location":"#PkgUtility.jl","page":"Home","title":"PkgUtility.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Utility functions for Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg;\njulia> Pkg.add(\"PkgUtility\");","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = PkgUtility","category":"page"},{"location":"API/#Artifacts","page":"API","title":"Artifacts","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"deploy_artifact\npredownload_artifact","category":"page"},{"location":"API/#PkgUtility.deploy_artifact","page":"API","title":"PkgUtility.deploy_artifact","text":"deploy_artifact(\n            art_toml::String,\n            art_name::String,\n            art_locf::String,\n            art_file::Array{String,1},\n            art_tarf::String,\n            art_urls::Array{String,1};\n            new_file::Array{String,1} = art_file)\ndeploy_artifact(\n            art_toml::String,\n            art_name::String,\n            art_locf::String,\n            art_tarf::String,\n            art_urls::Array{String,1})\n\nDeploy the artifact, given\n\nart_toml Artifact TOML file location\nart_name Artifact name identitfier\nart_locf Local folder that stores artifact files\nart_file Array of artifact file names\nart_tarf Folder location to store artifact TAR file\nart_urls Array of urls to upload the Artifact to\nnew_file Optional. New file names (same as art_file by default)\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.predownload_artifact","page":"API","title":"PkgUtility.predownload_artifact","text":"predownload_artifact(name::String, artifact_toml::String)\n\nDownload the artifact from given server if it does not exist, given\n\nname Artifact name\nartifact_toml Artifacts.toml file location\n\n\n\n\n\n","category":"function"},{"location":"API/#Display","page":"API","title":"Display","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"pretty_display","category":"page"},{"location":"API/#PkgUtility.pretty_display","page":"API","title":"PkgUtility.pretty_display","text":"pretty_display(\n            para::Array{Pair{Union{Any},Union{Any}},1},\n            spaces::String = \" \")\n\nDisplay array of pairs (dictionary) in recursive manner, given\n\npara Parameters to display\nspaces Leading spaces\n\n\n\n\n\n","category":"function"},{"location":"API/#Recursive-test","page":"API","title":"Recursive test","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"FT_test\nNaN_test","category":"page"},{"location":"API/#PkgUtility.FT_test","page":"API","title":"PkgUtility.FT_test","text":"FT_test(para::Any, FT)\n\nTest the the floating point type of para is FT, given\n\npara Any type of parameters\nFT given FT\n\nIf data type is not supported, use pass!\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.NaN_test","page":"API","title":"PkgUtility.NaN_test","text":"NaN_test(para::Any)\n\nTest the the floating point type of para is not NaN, given\n\npara Any type of parameters\n\nIf data type is not supported, use pass!\n\n\n\n\n\n","category":"function"}]
}
