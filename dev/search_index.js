var documenterSearchIndex = {"docs":
[{"location":"#PkgUtility.jl","page":"Home","title":"PkgUtility.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Utility functions for Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg;\njulia> Pkg.add(\"PkgUtility\");","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = PkgUtility","category":"page"},{"location":"API/#Artifacts","page":"API","title":"Artifacts","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"deploy_artifact!\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_file::Vector{String}, art_tarf::String, art_urls::Vector{String}; new_file::Vector{String} = art_file)\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_tarf::String, art_urls::Vector{String})","category":"page"},{"location":"API/#PkgUtility.deploy_artifact!","page":"API","title":"PkgUtility.deploy_artifact!","text":"PkgUtility provides a convenient wrapper to deploy the artifact from a given list of files, for exmaple, deploy_artifact! function is used to deploy the     GirddingMachine artifacts.\n\ndeploy_artifact!(art_toml, art_name, art_locf, art_file, art_tarf, art_urls; new_file)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/artifacts.jl:44.\n\ndeploy_artifact!(art_toml, art_name, art_locf, art_tarf, art_urls)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/artifacts.jl:100.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.deploy_artifact!-Tuple{String, String, String, Vector{String}, String, Vector{String}}","page":"API","title":"PkgUtility.deploy_artifact!","text":"What deploy_artifact! function does are\n\ndetermine if the artifact already exists in the art_toml file\nif true, skip the deployment\nif false\ncopy the file(s) to ~/.julia/artifacts/ARTIFACT_SHA/\ncompress the artifact file(s) to a .tar.gz file\ncalculate the hash value of the compressed tar.gz file\nbind the artifact file to the .toml file\n\nMethod for this deployment is\n\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_file::Vector{String}, art_tarf::String, art_urls::Vector{String}; new_file::Vector{String} = art_file)\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files\nart_file Vector of the source file names\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be uploaded (user need to upload the file manually)\nnew_file Optional. New file names of the copied files (same as art_file by default)\n\n\n\nExamples\n\n# deploy art_1.txt and art_2.txt as test_art artifact\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt], \"./\", [\"https://public.server.url\"]);\n\n# deploy art_1.txt and art_2.txt as test_art artifact with new names\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./\", [\"art_1.txt\", \"art_2.txt], \"./\", [\"https://public.server.url\"]; new_files=[\"new_1.txt\", \"new_2.txt\"]);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.deploy_artifact!-Tuple{String, String, String, String, Vector{String}}","page":"API","title":"PkgUtility.deploy_artifact!","text":"In many cases, one might want to copy all the files in a folder to the target artifact, and iterate the file names is not convenient at all. Thus, a     readily usable method is provided for this purpose:\n\ndeploy_artifact!(art_toml::String, art_name::String, art_locf::String, art_tarf::String, art_urls::Vector{String})\n\nDeploy the artifact, given\n\nart_toml Artifact .toml file location\nart_name Artifact name identitfier\nart_locf Local folder that stores the source files (all files will be copied into the artifact)\nart_tarf Folder location to store the compressed .tar.gz file\nart_urls Vector of public urls, where the compressed files are to be uploaded (user need to upload the file manually)\n\n\n\nExamples\n\n# deploy all files in target folder\ndeploy_artifact!(\"Artifacts.toml\", \"test_art\", \"./folder\", \"./\", [\"https://public.server.url\"]);\n\n\n\n\n\n","category":"method"},{"location":"API/#Date","page":"API","title":"Date","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"parse_timestamp\nparse_timestamp(time_stamp::Union{Int,String}; in_format::String=\"YYYYMMDD\", out_format::String=\"DOY\")\nparse_timestamp(year::Int, doy::Int, sep::String=\"\")\nmonth_days\nmonth_ind\nterror\ntinfo\ntwarn","category":"page"},{"location":"API/#PkgUtility.parse_timestamp","page":"API","title":"PkgUtility.parse_timestamp","text":"Researchers may often run into the scenarios when they have to convert dates to strings or numbers, vice versa. Thought the conversions are easy to make,     it is not convenient at all if ones need to recreate the wheel everytime. Thus, we provide functions to make the conversion. One of the common     conversions is to convert time stamp to a number:\n\nparse_timestamp(time_stamp; in_format, out_format)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/date/doy.jl:85.\n\nparse_timestamp(year, doy)\nparse_timestamp(year, doy, sep)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/date/doy.jl:153.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.parse_timestamp-Tuple{Union{Int64, String}}","page":"API","title":"PkgUtility.parse_timestamp","text":"The time stamp can be either an integer or a string, and the integer will be converted to a string within the function. The supported time stamp formats     are YYYYMMDD, YYYYMMDDhh, YYYYMMDDhhmm, and YYYYMMDDhhmmss, where the labels are\n\nYYYY Year number\nMM Month number\nDD Day number\nhh Hour number\nmm Minute number\nss second number\n\nThe supported outputs are\n\nDATE A Dates.Date type variable\nDATETIME A Dates.DateTime type variable\nDOY A day of year integer\nFDOY A day of year float\nparsetimestamp(               timestamp::Union{Int,String};               informat::String = \"YYYYMMDD\",               outformat::String = \"DOY\")\n\nConvert time stamp, given\n\ntime_stamp Time stamp\nin_format Format of time_stamp, default is YYYYMMDD\nout_format Output format, default is DOY\n\n\n\nExamples\n\n# if input format is YYYYMMDD\n_inf = \"YYYYMMDD\";\nfor _ts in [20200130, \"20200130\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        time = parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhh\n_inf = \"YYYYMMDDhh\";\nfor _ts in [2020013002, \"2020013002\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        time = parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhhmm\n_inf = \"YYYYMMDDhhmm\";\nfor _ts in [202001300215, \"202001300215\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        time = parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n# if input format is YYYYMMDDhhss\n_inf = \"YYYYMMDDhhmmss\";\nfor _ts in [20200130021515, \"20200130021515\"]\n    for _outf in [\"DATE\", \"DATETIME\", \"DOY\", \"FDOY\"]\n        time = parse_timestamp(_ts; in_format=_inf, out_format=_outf);\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.parse_timestamp-2","page":"API","title":"PkgUtility.parse_timestamp","text":"Also, one might want to convert date to time stamp. Supported conversions are\n\nparse_timestamp(year::Int, doy::Int, sep::String=\"\")\n\nConvert date to YYYY(sep)MM(sep)DD format, given\n\nyear Year\ndoy Day of year (typically 1-365, 1-366 for leap years)\nsep String that separates year, month, and day. Default is \"\"\n\n\n\nExamples\n\n# convert the time to YYYYMMDD format\ntime = parse_timestamp(2020, 100);\ntime = parse_timestamp(2020, 100, \"\");\n\n# convert the time to YYYY.MM.DD format\ntime = parse_timestamp(2020, 100, \".\");\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.month_days","page":"API","title":"PkgUtility.month_days","text":"month_days(year::Int, month::Int)\n\nHow many days in a month, given\n\nyear Year\nmonth Month\n\n\n\nExamples\n\n# inquire how many days in 2020 October\nmday = month_days(2020, 10);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.month_ind","page":"API","title":"PkgUtility.month_ind","text":"month_ind(year::Int, doy::Int)\n\nWhich month does the day of year belongs to, given\n\nyear Year\ndoy Day of year (typically 1-365, 1-366 for leap years)\n\n\n\nExamples\n\n# inquire which month it is for 100th day in 2020\nmind = month_ind(2020, 100);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.terror","page":"API","title":"PkgUtility.terror","text":"A function to covert information to time + information\n\nterror(info::String)\n\nDisplay the error info with date and time before the given\n\ninfo Infomation to display\n\n\n\nExamples\n\n# add a time stamp before the message\n@error terror(\"This is an error with time stamp at the beginning!\");\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.tinfo","page":"API","title":"PkgUtility.tinfo","text":"A function to covert information to time + information\n\ntinfo(info::String)\n\nDisplay the error info with date and time before the given\n\ninfo Infomation to display\n\n\n\nExamples\n\n# add a time stamp before the message\n@info tinfo(\"This is an info with time stamp at the beginning!\");\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.twarn","page":"API","title":"PkgUtility.twarn","text":"A function to covert information to time + information\n\ntwarn(info::String)\n\nDisplay the error info with date and time before the given\n\ninfo Infomation to display\n\n\n\nExamples\n\n# add a time stamp before the message\n@warn twarn(\"This is an info with time stamp at the beginning!\");\n\n\n\n\n\n","category":"function"},{"location":"API/#Display","page":"API","title":"Display","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"pretty_display!\npretty_display!(dict::Pair, max_len::Int, spaces=\"    \")\npretty_display!(dicts::Union{Vector{Pair{String,String}}, Vector{Pair{String,Any}}, Vector{Pair{Any,String}}, Vector{Pair{Any,Any}}}, spaces::String=\"    \")","category":"page"},{"location":"API/#PkgUtility.pretty_display!","page":"API","title":"PkgUtility.pretty_display!","text":"Display the parameters in a colored way.\n\npretty_display!(dict, max_len)\npretty_display!(dict, max_len, spaces)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/display/recursive.jl:36.\n\npretty_display!(dicts)\npretty_display!(dicts, spaces)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/display/recursive.jl:97.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.pretty_display!-2","page":"API","title":"PkgUtility.pretty_display!","text":"When a dictionary (a pair of key and item) is passed to the pretty_display! function, the dictionary will be displayed as (LEADING_SPACE)key ⇨ item,.     However, if the dictionary item is an array of dictionaries, then the array will be displayed recursively.\n\npretty_display!(dict::Pair, max_len::Int, spaces = \"    \")\n\nDisplay the key and item in a dictionary (Pair), given\n\ndict Dictionary to display\nmax_len Maximum length of dictionary key (in an array)\nspaces Leading spaces before displaying the dictionary key\n\n\n\nExamples\n\n# display the pair in a pretty way (automatic alignments)\npretty_display!(\"a\" => \"b\", 1);\npretty_display!(\"a\" => \"b\", 2, \"  \");\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.pretty_display!-3","page":"API","title":"PkgUtility.pretty_display!","text":"When an array of dictionaries is given, the pretty_display! function computes the maximum length of the dictionary keys, and then display the     dictionaries in a colored and pretty manner:\n\npretty_display!(\n            dicts::Union{Vector{Pair{String,String}},\n                         Vector{Pair{String,Any}},\n                         Vector{Pair{Any,String}},\n                         Vector{Pair{Any,Any}}},\n            spaces::String = \"    \")\n\nDisplay array of pairs (dictionary) in recursive manner, given\n\ndicts Parameters to display\nspaces Leading spaces\n\n\n\nExamples\n\n# display the vector of pairs recursively (automatic alignments)\n_dicts = [\"A\" => \"b\", \"d\" => \"A\", \"rr\" => [\"ra\" => \"rB\", \"rD\" => \"ra\"]];\npretty_display!(_dicts);\npretty_display!(_dicts, \"  \");\n\n\n\n\n\n","category":"function"},{"location":"API/#IO","page":"API","title":"IO","text":"","category":"section"},{"location":"API/#CSV","page":"API","title":"CSV","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"read_csv\nread_csv(file::String; skiprows::Int = 0)\nsave_csv!\nsave_csv!(df::DataFrame, file::String)\nsave_csv!(file::String, data::Vector, var_names::Vector{String}; per_row::Bool=true)\nsave_csv!(file::String, data::Vector; per_row::Bool=true)","category":"page"},{"location":"API/#PkgUtility.read_csv","page":"API","title":"PkgUtility.read_csv","text":"Reading CSV file may be troublesome for many cases, for example, when some lines exist before the header or when a few unit lines exist after the header.     Here we provide a generalized function to read CSV files:\n\nread_csv(file; skiprows, displaying)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:38.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.read_csv-Tuple{String}","page":"API","title":"PkgUtility.read_csv","text":"When there is no unit row in the CSV file, the method is given as\n\nread_csv(file::String; skiprows::Int = 0, displaying::Bool = false)\n\nRead CSV file as a DataFrame, given\n\nfile Path to CSV file\nskiprows Rows to skip\n\n\n\nExample\n\n# read CSV without skipping any rows\ndf = read_csv(\"test.csv\");\ndf = read_csv(\"test.csv\"; skiprows=0, displaying=true);\n\n# skip first 2 rows\ndf = read_csv(\"test.csv\"; skiprows=2, displaying=true);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.save_csv!","page":"API","title":"PkgUtility.save_csv!","text":"Saving data to CSV file may also be troublesome when we want to save the data using a known format, for example, when we want to save attributes in the     file as well such as the units. To best use Julia, we provide a generalized function to save data as CSV:\n\nsave_csv!(df, file; displaying)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:89.\n\nsave_csv!(file, df; displaying)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:100.\n\nsave_csv!(file, data, var_names; per_row)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:149.\n\nsave_csv!(data, var_names, file; per_row)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:194.\n\nsave_csv!(file, data; per_row)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:225.\n\nsave_csv!(data, file; per_row)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/csv.jl:231.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.save_csv!-Tuple{DataFrames.DataFrame, String}","page":"API","title":"PkgUtility.save_csv!","text":"To save the data as a plain CSV without any attribute information, one may use one of these functions. Note that the sequence of the data frame and file     name does not matter as the function will automatically recognize the sequence:\n\nsave_csv!(df::DataFrame, file::String; displaying::Bool = false)\nsave_csv!(file::String, df::DataFrame; displaying::Bool = false)\n\nSave data to CSV file, given\n\ndf A DataFrame\nfile Path of the target CSV file\n\n\n\nExample\n\n# save data to CSV without any rows to skip\ndf = read_csv(\"in.csv\"; skiprows=2);\nsave_csv!(df, \"out.csv\");\nsave_csv!(\"out.csv\", df);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.save_csv!-Tuple{String, Vector, Vector{String}}","page":"API","title":"PkgUtility.save_csv!","text":"In many cases, one might have the data as Vector or Matrix, for example, the result from multiple threading calculations using pmap. In this case,     converting the data to a DataFrame and then save the DataFrame may be the best case here. However, the results from pmap may be a Vector (R) of Vector     (N), or a Vector (R) of Matrix (1×N), or a Vector (R) of Tuple, or a Vector of combinations. While it is possible to use vcat or hcat to recast the     results to certain format, one needs to be really cautious about the recasting. Here we provide a wrapper function to automatically detect the result     format and save the data. Again, one may reverse the order of file name and data in the function parameter list:\n\nsave_csv!(file::String,\n          data::Vector,\n          var_names::Vector{String};\n          per_row::Bool=true)\nsave_csv!(data::Vector,\n          var_names::Vector{String},\n          file::String;\n          per_row::Bool=true)\n\nSave data to CSV file, given\n\nfile Path of the target CSV file\ndata A Vector of data, needs to be a Vector of Tuple (N), Vector (N), or Matrix (1×N)\nvar_name Variable names appear in the CSV file\nper_row If true, item in the data Vector is treated as row; othrewise, the data item is treated as column\n\n\n\nExample\n\n# when data has equal length\nsave_csv!(\"test.csv\", [(1,2), (1,2)], [\"A\", \"B\"]);\nsave_csv!(\"test.csv\", [[1,2], [1,2]], [\"A\", \"B\"]);\nsave_csv!(\"test.csv\", [[1 2], [1 2]], [\"A\", \"B\"]);\nsave_csv!(\"test.csv\", [[1,2], [1 2], (1,2)], [\"A\", \"B\"]);\n\n# when data has unequal length\nsave_csv!(\"test.csv\", [(1,2), [1 2 3], [1,2,3,4]], [\"A\", \"B\"]);\nsave_csv!(\"test.csv\", [(1,2), [1 2 3], [1,2,3,4]], [\"A\", \"B\", \"C\", \"D\", \"E\"]);\n\n# use data item as column rather than row (default)\nsave_csv!(\"test.csv\", [[1 2], [1 2]], [\"A\", \"B\"]; per_row=false);\nsave_csv!(\"test.csv\", [[1 2], [1 2 3]], [\"A\", \"B\"]; per_row=false);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.save_csv!-Tuple{String, Vector}","page":"API","title":"PkgUtility.save_csv!","text":"Further, as the above method supports filling in missing values, it is possible to not set the var_names:\n\nsave_csv!(file::String, data::Vector; per_row::Bool=true)\nsave_csv!(data::Vector, file::String; per_row::Bool=true)\n\nSave data to CSV file, given\n\nfile Path of the target CSV file\ndata A Vector of data, needs to be a Vector of Tuple (N), Vector (N), or Matrix (1×N)\nper_row If true, item in the data Vector is treated as row; othrewise, the data item is treated as column\n\n\n\nExample\n\n# when data has equal length\nsave_csv!(\"test.csv\", [[1,2], [1 2], (1,2)]);\n\n# when data has unequal length\nsave_csv!(\"test.csv\", [(1,2), [1 2 3], [1,2,3,4]]);\n\n# use data item as column rather than row (default)\nsave_csv!(\"test.csv\", [[1 2], [1 2]]; per_row=false);\nsave_csv!(\"test.csv\", [[1 2], [1 2 3]]; per_row=false);\n\n\n\n\n\n","category":"method"},{"location":"API/#DataFrame","page":"API","title":"DataFrame","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"dataframe\ndataframe()\ndataframe(v_data::Vector, v_name::Vector{String})","category":"page"},{"location":"API/#PkgUtility.dataframe","page":"API","title":"PkgUtility.dataframe","text":"Create a data frame from given parameters:\n\ndataframe()\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/dataframe.jl:30.\n\ndataframe(v_data, v_name)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/dataframe.jl:46.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.dataframe-Tuple{}","page":"API","title":"PkgUtility.dataframe","text":"If no parameter is passed to dataframe, an empty DataFrame will be returned:\n\ndataframe()\n\nReturn an empty DataFrame\n\n\n\nExample\n\ndf = dataframe();\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.dataframe-Tuple{Vector, Vector{String}}","page":"API","title":"PkgUtility.dataframe","text":"When a vector of data and a vector of headers are given, dataframe returns a DataFrame with the given data and header:\n\ndataframe(v_data::Vector, v_name::Vector{String})\n\nReturn a DataFrame for given\n\nv_data Vector of data\nv_name Vector of data header\n\nNote that the data and header vectors must have the same length.\n\n\n\n\n\n","category":"method"},{"location":"API/#Email","page":"API","title":"Email","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"send_email!\nsend_email!(subject::String, from_email::String, to_email::String, body::String)","category":"page"},{"location":"API/#PkgUtility.send_email!","page":"API","title":"PkgUtility.send_email!","text":"Running program on the server mat take very long time, and one may not know the status without logging into the system. Thus, we provide a function to send     email to notify the status:\n\nsend_email!(subject, from_email, to_email, body)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/io/email.jl:43.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.send_email!-NTuple{4, String}","page":"API","title":"PkgUtility.send_email!","text":"Here is the function to send email out:\n\nsend_email!(subject::String,\n            from_email::String,\n            to_email::String,\n            body::String)\n\nSend out email, given\n\nsubject Email subject\nfrom_email The outgoing email address\nto_email Email address to send out\nbody Main body of the email\n\nNote that you have to run this function on a machine with sendmail set up.\n\n\n\nExample\n\nsend_email!(\"[DO NOT REPLY] Job status\", \"from.email\", \"to.email\", \"This is the main text\");\n\n\n\n\n\n","category":"method"},{"location":"API/#Land-Wrapper","page":"API","title":"Land Wrapper","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AVOGADRO\nCP_D\nCP_D_MOL\nCP_L\nCP_V\nGAS_R\nGRAVITY\nH_PLANCK\nK_BOLTZMANN\nK_STEFAN\nK_VON_KARMAN\nLH_V0\nLIGHT_SPEED\nM_DRYAIR\nM_H₂O\nP_ATM\nPRESS_TRIPLE\nR_V\nRT_25\nT_0\nT_25\nT_TRIPLE\nV_H₂O\nYEAR_D\nρ_H₂O\nρg_MPa","category":"page"},{"location":"API/#PkgUtility.AVOGADRO","page":"API","title":"PkgUtility.AVOGADRO","text":"Avogadro's number [molecule mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.CP_D","page":"API","title":"PkgUtility.CP_D","text":"Isobaric specific heat of dry air [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.CP_D_MOL","page":"API","title":"PkgUtility.CP_D_MOL","text":"Isobaric specific heat of dry air [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.CP_L","page":"API","title":"PkgUtility.CP_L","text":"Isobaric specific heat of liquid water [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.CP_V","page":"API","title":"PkgUtility.CP_V","text":"Isobaric specific heat of water vapor [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.GAS_R","page":"API","title":"PkgUtility.GAS_R","text":"Universal gas constant [J mol⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.GRAVITY","page":"API","title":"PkgUtility.GRAVITY","text":"Gravity of the Earth [m s⁻²] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.H_PLANCK","page":"API","title":"PkgUtility.H_PLANCK","text":"Planck constant [m² kg s⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.K_BOLTZMANN","page":"API","title":"PkgUtility.K_BOLTZMANN","text":"Boltzmann constant [m² kg s⁻² K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.K_STEFAN","page":"API","title":"PkgUtility.K_STEFAN","text":"Stefan-Boltzmann constant [W m⁻² K⁻⁴] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.K_VON_KARMAN","page":"API","title":"PkgUtility.K_VON_KARMAN","text":"Von Karman constant [-] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.LH_V0","page":"API","title":"PkgUtility.LH_V0","text":"Latent heat vaporization at T_0 [K kg⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.LIGHT_SPEED","page":"API","title":"PkgUtility.LIGHT_SPEED","text":"Light speed in vacuum [m s⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.M_DRYAIR","page":"API","title":"PkgUtility.M_DRYAIR","text":"Molar mass of dry air [kg mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.M_H₂O","page":"API","title":"PkgUtility.M_H₂O","text":"Molar mass of water [kg mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.P_ATM","page":"API","title":"PkgUtility.P_ATM","text":"Mean atmospheric pressure at sea level [Pa] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.PRESS_TRIPLE","page":"API","title":"PkgUtility.PRESS_TRIPLE","text":"Water vapor pressure at triple temperature [Pa] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.R_V","page":"API","title":"PkgUtility.R_V","text":"Gas constant water vapor [J kg⁻¹ K⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.RT_25","page":"API","title":"PkgUtility.RT_25","text":"Gas constant times 298.15 K [J mol⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.T_0","page":"API","title":"PkgUtility.T_0","text":"Freezing temperature of water [K] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.T_25","page":"API","title":"PkgUtility.T_25","text":"Kelvin temperature at 25 Celcius [K] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.T_TRIPLE","page":"API","title":"PkgUtility.T_TRIPLE","text":"Triple temperature of water [K] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.V_H₂O","page":"API","title":"PkgUtility.V_H₂O","text":"Molar volume of liqiud water \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.YEAR_D","page":"API","title":"PkgUtility.YEAR_D","text":"Mean number of days per year [day] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.ρ_H₂O","page":"API","title":"PkgUtility.ρ_H₂O","text":"Density of liquid water [kg m⁻³] \n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.ρg_MPa","page":"API","title":"PkgUtility.ρg_MPa","text":"Density of water times gravity [MPa m⁻¹] \n\n\n\n\n\n","category":"function"},{"location":"API/#Math","page":"API","title":"Math","text":"","category":"section"},{"location":"API/#Integral","page":"API","title":"Integral","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"numerical∫\nnumerical∫(f::Array{Float64,1}, Δx::Array{Float64,1})\nnumerical∫(f::Array{Float64,1}, Δx::Float64)\nnumerical∫(f::Function, x_min::Float64, x_max::Float64, n::Int)\nnumerical∫(f::Function, x_min::Float64, x_max::Float64, x_tol::Float64=sqrt(eps(Float64)), y_tol::Float64=sqrt(eps(Float64)))","category":"page"},{"location":"API/#PkgUtility.numerical∫","page":"API","title":"PkgUtility.numerical∫","text":"Function numerical∫ calculates the integral numerically. The supported methods are\n\nnumerical∫(f, Δx)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:36.\n\nnumerical∫(f, Δx)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:67.\n\nnumerical∫(f, x_min, x_max, n)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:102.\n\nnumerical∫(f, x_min, x_max)\nnumerical∫(f, x_min, x_max, x_tol)\nnumerical∫(f, x_min, x_max, x_tol, y_tol)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/math/integral.jl:148.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.numerical∫-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"PkgUtility.numerical∫","text":"When two arrays (one for f(x) and one for Δx) are provided, numerical∫ computes the sum of the mutiplication of the two using matrix mutiplication     fxs' * Δxs.\n\nnumerical∫(f::Array{FT,1}, Δx::Array{FT,1}) where {FT<:AbstractFloat}\n\nIntergal of given\n\nf f(x) for each x\nΔx Δx for each x\n\nNote that f and Δx may have different dimensions, and if so a warning will display.\n\n\n\nExamples\n\nFT = Float32;\nf_sum = numerical∫(FT[1,2,3,4], FT[0.1,0.1,0.2,0.3]);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.numerical∫-Tuple{Vector{Float64}, Float64}","page":"API","title":"PkgUtility.numerical∫","text":"The above methods is useful for both evenly and non-evenly distributed Δx. However, for many cases Δx is evenly distributed and provided as a number     rather than an array. In this scenario, a special method is given:\n\nnumerical∫(f::Array{FT,1}, Δx::FT) where {FT<:AbstractFloat}\n\nIntergal of given\n\nf f(x) for each x\nΔx Δx for x\n\n\n\nExamples\n\nFT = Float32;\nf_sum = numerical∫(FT[1,2,3,4], FT(0.1));\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.numerical∫-Tuple{Function, Float64, Float64, Int64}","page":"API","title":"PkgUtility.numerical∫","text":"We also provide a function to manually solve for the integral of a given function for a given range of x. The method is\n\nnumerical∫(f::Function,\n           x_min::FT,\n           x_max::FT,\n           n::Int\n) where {FT<:AbstractFloat}\n\nIntergal of given\n\nf A function\nx_min Minimum limit of x\nx_max Maximum limit of x\nn Number of points in the x range (evenly stepped)\n\n\n\nExamples\n\nFT = Float32;\nfunc(x) = x^2;\nf_sum = numerical∫(func, FT(0), FT(2), 20);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.numerical∫-2","page":"API","title":"PkgUtility.numerical∫","text":"This method automatically computes the integral of a function for an x within a range:\n\nnumerical∫(f::Function,\n           x_min::FT,\n           x_max::FT,\n           x_tol::FT = sqrt(eps(FT)),\n           y_tol::FT = sqrt(eps(FT))\n) where {FT<:AbstractFloat}\n\nIntergal of given\n\nf A function\nx_min Minimum limit of x\nx_max Maximum limit of x\nx_tol Tolerance of Δx (x/N)\ny_tol Tolerance of the integral solution\n\n\n\nExample\n\nFT = Float32;\nfunc(x) = x^2;\nf_sum = numerical∫(func, FT(0), FT(2));\nf_sum = numerical∫(func, FT(0), FT(2), FT(1e-3), FT(1e-3));\n\n\n\n\n\n","category":"function"},{"location":"API/#Quadratic-solver","page":"API","title":"Quadratic solver","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"lower_quadratic\nupper_quadratic","category":"page"},{"location":"API/#PkgUtility.lower_quadratic","page":"API","title":"PkgUtility.lower_quadratic","text":"lower_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the lower quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\nExample\n\nlow_x = lower_quadratic(1.0, 2.0, 0.0);\nlow_x = lower_quadratic(-1.0, 2.0, 0.0);\nlow_x = lower_quadratic(1.0, 2.0, 2.0);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.upper_quadratic","page":"API","title":"PkgUtility.upper_quadratic","text":"upper_quadratic(a::FT, b::FT, c::FT) where {FT<:AbstractFloat}\n\nReturn the upper quadratic solution or NaN, given\n\na Parameter in a*x^2 + b*x + c = 0\nb Parameter in a*x^2 + b*x + c = 0\nc Parameter in a*x^2 + b*x + c = 0\n\n\n\nExample\n\nup_x = upper_quadratic(1.0, 2.0, 0.0);\nup_x = upper_quadratic(-1.0, 2.0, 0.0);\nup_x = upper_quadratic(1.0, 2.0, 2.0);\n\n\n\n\n\n","category":"function"},{"location":"API/#Statistics-extensions","page":"API","title":"Statistics extensions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"nanmax\nnanmean\nnanmedian\nnanmin\nnanpercentile\nnanstd\nmae\nmape\nmase\nrmse","category":"page"},{"location":"API/#PkgUtility.nanmax","page":"API","title":"PkgUtility.nanmax","text":"nanmax(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnmax = nanmax(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmean","page":"API","title":"PkgUtility.nanmean","text":"nanmean(x::Array)\n\nReturn the mean of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnmean = nanmean(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmedian","page":"API","title":"PkgUtility.nanmedian","text":"nanmedian(x::Array)\n\nReturn the median of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnmed = nanmedian(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanmin","page":"API","title":"PkgUtility.nanmin","text":"nanmin(x::Array)\n\nReturn the maximum of array ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnmin = nanmin(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanpercentile","page":"API","title":"PkgUtility.nanpercentile","text":"nanpercentile(x::Array, p::Number)\n\nReturn the percentile by excluding the NaN of given\n\nx Array of data\np Percentile\n\n\n\nExample\n\nxs = rand(100);\npth = nanpercentile(rand(100), 50);\nxs[1:10] .= NaN;\npth = nanpercentile(rand(100), 50);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.nanstd","page":"API","title":"PkgUtility.nanstd","text":"nanstd(x::Array)\n\nReturn the std of array by ommiting the NaN, given\n\nx Array of numbers, can be NaN\n\n\n\nExample\n\nxs = [1, 2, 4, NaN];\nnstd = nanstd(xs);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.mae","page":"API","title":"PkgUtility.mae","text":"mae(y::Array, pred::Array)\n\nReturn the mean absolute error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\nExample\n\nys = [1, 2, 4, NaN];\npreds = [2, 4, 1, NaN];\nnmae = mae(ys, preds);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.mape","page":"API","title":"PkgUtility.mape","text":"mape(y::Array, pred::Array)\n\nReturn the mean absolute percentage error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\nExample\n\nys = [1, 2, 4, NaN];\npreds = [2, 4, 1, NaN];\nnmape = mape(ys, preds);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.mase","page":"API","title":"PkgUtility.mase","text":"mase(y::Array, pred::Array)\n\nReturn the mean absolute standardized error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\nExample\n\nys = [1, 2, 4, NaN];\npreds = [2, 4, 1, NaN];\nnmase = mase(ys, preds);\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.rmse","page":"API","title":"PkgUtility.rmse","text":"rmse(y::Array, pred::Array)\n\nReturn the root mean square error by ommiting the NaN, given\n\ny Array of numbers, can be NaN\npred Array of predictions, can be NaN\n\n\n\nExample\n\nys = [1, 2, 4, NaN];\npreds = [2, 4, 1, NaN];\nrmse = rmse(ys, preds);\n\n\n\n\n\n","category":"function"},{"location":"API/#Recursive-test","page":"API","title":"Recursive test","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"FT_test\nFT_test(para::Array, Float64)\nFT_test(para::Number, Float64)\nFT_test(para::Union{Function,Module,Symbol})\nFT_test(para::Any, Float64)\nNaN_test\nNaN_test(para::Array)\nNaN_test(para::Number)\nNaN_test(para::Union{Function,Module,Symbol})\nNaN_test(para::Any)","category":"page"},{"location":"API/#PkgUtility.FT_test","page":"API","title":"PkgUtility.FT_test","text":"Using consistent floating number type may accelerate calculations, particularly for GPUs. Thus, we provided a function to test the floating number type     recursively:\n\nFT_test(para, FT)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:37.\n\nFT_test(para, FT)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:76.\n\nFT_test(para)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:114.\n\nFT_test(para, FT)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:144.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.FT_test-Tuple{Array, Any}","page":"API","title":"PkgUtility.FT_test","text":"If the testing variable is an array, the function will test if element type is float number:\n\nIf true, the function tests if the element type is the same as given FT\nIf false, the function tests each element recursively\nFT_test(para::Array, FT)\n\nTest the the floating point type of a variable, given\n\npara An array\nFT given FT\n\n\n\nExample\n\nft_1 = FT_test([1, 2, 3], Float64);\nft_2 = FT_test(Any[1, 1.0f0, 1.0e0], Float64);\nft_3 = FT_test([1, 2.0, \"a\"], Float64);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.FT_test-Tuple{Number, Any}","page":"API","title":"PkgUtility.FT_test","text":"When the given variable is a number, the following criteria are used based on the type of the number\n\nIf the variable is a float, then compare it to FT\nOtherwise, return true (because integers can be mix-used with floats)\nFT_test(para::Number, FT)\n\nTest the the floating point type of a variable, given\n\npara A number\nFT given FT\n\nExample\n\nft_1 = FT_test(1, Float64);\nft_2 = FT_test(1.0, Float64);\nft_3 = FT_test(1.0f0, Float64);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.FT_test-Tuple{Union{Function, Module, Symbol}}","page":"API","title":"PkgUtility.FT_test","text":"If the variable is a function, module, or symbol, then nothing will be done, and a true will be returned. This method is to avoid endless nested loop     within the test of Function or Module:\n\nFT_test(para::Union{Function,Module,Symbol})\n\nTest the the floating point type of a variable, given\n\npara An array\nFT given FT\n\n\n\nExample\n\nf(x) = x^2;\nm = CLIMAParameters;\n\nft_1 = FT_test(f, Float64);\nft_2 = FT_test(m, Float64);\nft_3 = FT_test(\"haha\", Float64);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.FT_test-Tuple{Any, Any}","page":"API","title":"PkgUtility.FT_test","text":"The variable to test maybe a struct, but FT_test does not know the struct type name a priori. Thus, we try to read out the fields of the variable:\n\nIf succeeds, the function test the fields recursively\nIf fails, then do nothing\nFT_test(para::Any, FT)\n\nTest the the floating point type of a variable, given\n\npara A function, module, or symbol\nFT given FT\n\n\n\nExample\n\nstruct SA\n    a\n    b\nend\nsa = SA(1, 2.0);\n\nft_1 = FT_test(sa);\nft_2 = FT_test();\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.NaN_test","page":"API","title":"PkgUtility.NaN_test","text":"Like FT_test, same logic is used to test if all the elements within the tested variable are not NaN:\n\nNaN_test(para)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:208.\n\nNaN_test(para)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:244.\n\nNaN_test(para)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:269.\n\nNaN_test(para)\n\ndefined at /home/runner/work/PkgUtility.jl/PkgUtility.jl/src/test/recursive.jl:294.\n\n\n\n\n\n","category":"function"},{"location":"API/#PkgUtility.NaN_test-Tuple{Array}","page":"API","title":"PkgUtility.NaN_test","text":"When an array is passed to the function, the function first determines if the variable is an array of number:\n\nIf true, the function tests each element within the array directly\nIf false, the function tests each element recursively\nNaN_test(para::Array)\n\nTest the the floating point type of para is not NaN, given\n\npara An array\n\n\n\nExample\n\nnan_1 = NaN_test([1,2,NaN]);\nnan_2 = NaN_test([1,3,4]);\nnan_3 = NaN_test([1,2,\"a\"]);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.NaN_test-Tuple{Number}","page":"API","title":"PkgUtility.NaN_test","text":"If the variable is a number, the function tests if the number is NaN directly:\n\nNaN_test(para::Number)\n\nTest if the variable is NaN, given\n\npara A number\n\n\n\nExample\n\nnan_1 = NaN_test(1);\nnan_2 = NaN_test(NaN);\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.NaN_test-Tuple{Union{Function, Module, Symbol}}","page":"API","title":"PkgUtility.NaN_test","text":"If the variable is a function, module, or symbol, then nothing will be done, and a true will be returned. This method is to avoid endless nested loop     within the test of Function or Module:\n\nNaN_test(para::Union{Function,Module,Symbol})\n\nTest the the floating point type of a variable, given\n\npara A function, module, or symbol\n\n\n\nExample\n\nf(x) = x^2;\nm = CLIMAParameters;\n\nnan_1 = NaN_test(f);\nnan_2 = NaN_test(m);\nnan_3 = NaN_test(\"haha\");\n\n\n\n\n\n","category":"method"},{"location":"API/#PkgUtility.NaN_test-Tuple{Any}","page":"API","title":"PkgUtility.NaN_test","text":"If the given variable is a struct, the function will test the fields recursively:\n\nNaN_test(para::Any)\n\nTest if the variable contains any NaN, given\n\npara Tested variable\n\n\n\nExample\n\nstruct SA\n    a\n    b\nend\n\nnan_1 = NaN_test(SA(1,2));\nnan_2 = NaN_test(SA(1,NaN));\n\n\n\n\n\n","category":"method"}]
}
